openapi: 3.0.2
info:
  title: softdesk's api
  version: ''
paths:
  /api/project/:
    get:
      security:
        - bearerAuth: []
      operationId: listProjects
      description: Returns the list of projects to which the authenticated user contributes.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
    post:
      security:
        - bearerAuth: [ ]
      operationId: createProject
      description: create a project instance, only accessible to an authenticated
        user.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
  /api/project/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: retrieveProject
      description: Return a project instance.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
    put:
      security:
        - bearerAuth: [ ]
      operationId: updateProject
      description: update a project instance, only accessible to project's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
    patch:
      security:
        - bearerAuth: [ ]
      operationId: partialUpdateProject
      description: update a project instance, only accessible to project's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
    delete:
      security:
        - bearerAuth: [ ]
      operationId: destroyProject
      description: delete a project, only accessible to project's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - Project
  /api/issue/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: listIssues
      description: Return the list of issues linked to project to which the authenticated
        user contributes.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Issue'
          description: ''
      tags:
      - project
      - issue
  /api/issue/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: retrieveIssue
      description: Return an issue linked to project to which the authenticated user
        contributes.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: ''
      tags:
      - project
      - issue
    put:
      security:
        - bearerAuth: [ ]
      operationId: updateIssue
      description: update an issue, only accessible to issue's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Issue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: ''
      tags:
      - project
      - issue
    patch:
      security:
        - bearerAuth: [ ]
      operationId: partialUpdateIssue
      description: update an issue, only accessible to issue's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Issue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: ''
      tags:
      - project
      - issue
    delete:
      security:
        - bearerAuth: [ ]
      operationId: destroyIssue
      description: delete an issue, only accessible to issue's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - project
      - issue
  /api/comment/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: listComments
      description: Returns the list of comments linked to project which the authenticated
        user contributes.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - project
      - issue
      - comment
  /api/comment/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: retrieveComment
      description: Return a comment linked to project which the authenticated user
        contributes.
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - project
      - issue
      - comment
    put:
      security:
        - bearerAuth: [ ]
      operationId: updateComment
      description: update a comment, only accessible to comment's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - project
      - issue
      - comment
    patch:
      security:
        - bearerAuth: [ ]
      operationId: partialUpdateComment
      description: update an issue, only accessible to comment's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - project
      - issue
      - comment
    delete:
      security:
        - bearerAuth: [ ]
      operationId: destroyComment
      description: delete an issue, only accessible to comment's author
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - project
      - issue
      - comment
  /api/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
          description: ''
      tags:
      - api
  /api/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                  access:
                    type: string
          description: ''
      tags:
      - api
  /api/signup/:
    post:
      operationId: createUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Signup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Signup'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
          description: ''
      tags:
      - api
  /api/project/{id}/add_contributor/:
    post:
      security:
        - bearerAuth: [ ]
      operationId: addContributorProject
      description: Add a contributor to a project, only accessible to a project contributor
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
  /api/project/{id}/add_issue/:
    post:
      security:
        - bearerAuth: [ ]
      operationId: addIssueProject
      description: Add an issue to a project, only accessible to a project contributor
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
      tags:
      - Project
  /api/issue/{id}/add_comment/:
    post:
      security:
        - bearerAuth: [ ]
      operationId: addCommentIssue
      description: Add a comment to an issue, only accessible to a project contributor
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Issue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: ''
      tags:
      - project
      - issue
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          description: project's title
          maxLength: 128
        author:
          type: string
          readOnly: true
        type:
          enum:
          - BACKEND
          - FRONTEND
          - SMARTPHONE
          type: string
          description: This field is used to categorize the project. Use, BACKEND=>back-end,
            FRONTEND=>front-end, SMARTPHONE=>iOS ou Android
      required:
      - title
      - type
    Issue:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 128
        author:
          type: string
          readOnly: true
        tag:
          enum:
          - BUG
          - IMPROVEMENT
          - TASK
          type: string
          description: This field is used to categorize the issue. Use, BUG=>bug,
            IMPROVEMENT=>improvement, TASK=>task
        priority:
          enum:
          - LOW
          - MEDIUM
          - HIGH
          type: string
          description: This field is used to categorize the issue. Use, LOW=>low,
            MEDIUM=>medium, HIGH=>high
        status:
          enum:
          - TODO
          - INPROGESS
          - FINISHED
          type: string
          description: This field is used to categorize the issue. Use, TODO=>to do,
            INPROGESS=>in progress, FINISHED=>finished
      required:
      - title
      - tag
      - priority
      - status
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          type: string
          readOnly: true
        issue:
          type: string
          readOnly: true
        description:
          type: string
          maxLength: 2048
        author:
          type: string
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    Signup:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - username
      - password
      - password2
